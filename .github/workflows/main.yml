name: "publish"

# This will trigger the action on each push to the `release` branch.
on: [push]

jobs:
  publish-tauri:
    permissions:
      contents: write
      deployments: write
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: install frontend dependencies
        run: pnpm install # change this to npm or pnpm depending on which one you use

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
          releaseName: "App v__VERSION__"
          releaseBody: "See the assets to download this version and install."
          releaseDraft: true
          prerelease: false

        # Temp read directories
      - name: List bundle MacOS
        if: ${{ matrix.platform == 'macos-latest' }}
        run: ls -lt src-tauri/target/release/bundle

      - name: List bundle Windows
        if: ${{ matrix.platform == 'windows-latest' }}
        run: tree src-tauri\target\release\bundle

        # Upload artifacts
      - name: Upload Artifacts
        if: ${{ matrix.platform == 'macos-latest' }}
        uses: actions/upload-artifact@v4
        id: upload-macos-artifacts
        with:
          name: macos-tauri-test
          path: src-tauri/target/release/bundle/dmg/

      - name: Echo artifact id
        if: ${{ matrix.platform == 'macos-latest' }}
        run: echo 'Artifact Id ${{steps.upload-macos-artifacts.outputs.artifact-id}}'

      - name: Upload Artifacts
        if: ${{ matrix.platform == 'windows-latest' }}
        uses: actions/upload-artifact@v4
        id: upload-windows-artifact
        with:
          name: windows-tauri-test
          path: |
            src-tauri/target/release/bundle/msi/
            src-tauri/target/release/bundle/nsis/

      - name: Echo artifact id
        if: ${{ matrix.platform == 'windows-latest' }}
        run: echo 'Artifact Id ${{steps.upload-windows-artifact.outputs.artifact-id}}'

        # Create GitHub Deployment
      - name: Create GitHub deployment
        uses: chrnorm/deployment-action@v2
        id: preview
        with:
          token: "${{ secrets.GITHUB_TOKEN }}"
          description: "Deploy to preview environment"
          environment: preview

        # Upload to S3
      - name: Upload Mac artifacts to s3
        if: ${{ matrix.platform == 'macos-latest' }}
        uses: shallwefootball/s3-upload-action@master
        id: s3-mac
        with:
          aws_key_id: ${{ secrets.AWS_ACCESS_KEY }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_KEY}}
          aws_bucket: ${{ secrets.AWS_BUCKET }}
          source_dir: 'src-tauri/target/release/bundle/dmg/'

      - name: Upload Windows Artifacts to s3
        if: ${{ matrix.platform == 'windows-latest' }}
        uses: shallwefootball/s3-upload-action@master
        id: s3-windows
        with:
          aws_key_id: ${{ secrets.AWS_ACCESS_KEY }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_KEY}}
          aws_bucket: ${{ secrets.AWS_BUCKET }}
          source_dir: 'src-tauri/target/release/bundle/msi'

        # Update deployment status
      - name: Update deployment success
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: 'success'
          deployment-id: ${{ steps.preview.outputs.deployment_id }}

      - name: Update deployment failure
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          state: 'failure'
          deployment-id: ${{ steps.preview.outputs.deployment_id }}
      
  
  